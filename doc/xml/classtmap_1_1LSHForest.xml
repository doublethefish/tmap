<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classtmap_1_1LSHForest" kind="class" language="C++" prot="public">
    <compoundname>tmap::LSHForest</compoundname>
    <includes refid="lshforest_8hh" local="no">lshforest.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1ae03e66c3187aa02754b8bc3fc48efb4d" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int tmap::LSHForest::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="436" column="1" bodyfile="tmap/lshforest.hh" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a24a8cf97f3d63ead2768acf8e0c3d8fa" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int tmap::LSHForest::l_</definition>
        <argsstring></argsstring>
        <name>l_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="436" column="1" bodyfile="tmap/lshforest.hh" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a335cda32466ccb96b08709bc9a3cc890" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int tmap::LSHForest::k_</definition>
        <argsstring></argsstring>
        <name>k_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="436" column="1" bodyfile="tmap/lshforest.hh" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1ad9a6dbe4c57320d45683e87a9894fd13" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long tmap::LSHForest::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="437" column="1" bodyfile="tmap/lshforest.hh" bodystart="437" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1aabb23f14c1f7d76a1741dc33d9e51d3c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tmap::LSHForest::clean_</definition>
        <argsstring></argsstring>
        <name>clean_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="438" column="1" bodyfile="tmap/lshforest.hh" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a43d398f5d4969af3c9b434cd75ec0e02" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tmap::LSHForest::store_</definition>
        <argsstring></argsstring>
        <name>store_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="438" column="1" bodyfile="tmap/lshforest.hh" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a68a849c2293744ce6ae973e5d26ceef4" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tmap::LSHForest::file_backed_</definition>
        <argsstring></argsstring>
        <name>file_backed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="438" column="1" bodyfile="tmap/lshforest.hh" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1ae360cd3968379632b68084f98f0c14c2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool tmap::LSHForest::weighted_</definition>
        <argsstring></argsstring>
        <name>weighted_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="438" column="1" bodyfile="tmap/lshforest.hh" bodystart="438" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a5f50bc70de1b4948b2cd0626c0732f28" prot="private" static="no" mutable="no">
        <type>std::vector&lt; spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt;, <ref refid="structtmap_1_1SimpleHash" kindref="compound">SimpleHash</ref> &gt; &gt;</type>
        <definition>std::vector&lt;spp::sparse_hash_map&lt;std::vector&lt;uint8_t&gt;, std::vector&lt;uint32_t&gt;, SimpleHash&gt; &gt; tmap::LSHForest::hashtables_</definition>
        <argsstring></argsstring>
        <name>hashtables_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="442" column="1" bodyfile="tmap/lshforest.hh" bodystart="442" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a9af1d81da0477216a87e51a5c006d9fb" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::tuple&lt; uint32_t, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt;std::tuple&lt;uint32_t, uint32_t&gt; &gt; tmap::LSHForest::hashranges_</definition>
        <argsstring></argsstring>
        <name>hashranges_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="443" column="1" bodyfile="tmap/lshforest.hh" bodystart="443" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a2e195f4ba7d59af6b833c6096a95f118" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="structtmap_1_1MapKeyPointer" kindref="compound">MapKeyPointer</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;MapKeyPointer&gt; &gt; tmap::LSHForest::sorted_hashtable_pointers_</definition>
        <argsstring></argsstring>
        <name>sorted_hashtable_pointers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="444" column="1" bodyfile="tmap/lshforest.hh" bodystart="444" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classtmap_1_1LSHForest_1a6b7cb1e666ac685746d811126a6f0788" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;uint32_t&gt; &gt; tmap::LSHForest::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="445" column="1" bodyfile="tmap/lshforest.hh" bodystart="445" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a90a9f6e40e63f90838c7ece0e0e3ec25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>tmap::LSHForest::LSHForest</definition>
        <argsstring>(unsigned int d=128, unsigned int l=8, bool store=true, bool file_backed=false, bool weighted=false)</argsstring>
        <name>LSHForest</name>
        <param>
          <type>unsigned int</type>
          <declname>d</declname>
          <defval>128</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>l</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>store</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>file_backed</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classtmap_1_1LSHForest" kindref="compound">LSHForest</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionality of the MinHashes to be added to this <ref refid="classtmap_1_1LSHForest" kindref="compound">LSHForest</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of prefix trees used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to store the data for later enhanced (using parameter kc) retrievel. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_backed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to store the data on disk rather than in RAM (experimental). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="125" column="1" bodyfile="tmap/lshforest.cc" bodystart="12" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a3ab5789f702f9dac3f801c7b9d53afd4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>tmap::LSHForest::~LSHForest</definition>
        <argsstring>()</argsstring>
        <name>~LSHForest</name>
        <briefdescription>
<para>Destroy the <ref refid="classtmap_1_1LSHForest" kindref="compound">LSHForest</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="135" column="1" bodyfile="tmap/lshforest.hh" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a480d0de16bc1e4b1365bf97b9b60223a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::Add</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;vec)</argsstring>
        <name>Add</name>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Add a MinHash to this <ref refid="classtmap_1_1LSHForest" kindref="compound">LSHForest</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A MinHash vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="142" column="1" bodyfile="tmap/lshforest.cc" bodystart="41" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ab3f73f59918a37b63662679461828cbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::BatchAdd</definition>
        <argsstring>(std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;vecs)</argsstring>
        <name>BatchAdd</name>
        <param>
          <type>std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>vecs</declname>
        </param>
        <briefdescription>
<para>Add Minhashes to this <ref refid="classtmap_1_1LSHForest" kindref="compound">LSHForest</ref> (parallelized). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing MinHash vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="149" column="1" bodyfile="tmap/lshforest.cc" bodystart="65" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1aba68c9cab8cc3c32e684e08b4f9d0a33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::Index</definition>
        <argsstring>()</argsstring>
        <name>Index</name>
        <briefdescription>
<para>Create the index (trees). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="155" column="1" bodyfile="tmap/lshforest.cc" bodystart="109" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a7785c1a7f17eddd5e943db4b5d6d7cf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool tmap::LSHForest::IsClean</definition>
        <argsstring>()</argsstring>
        <name>IsClean</name>
        <briefdescription>
<para>Check whether the added MinHashes have been indexed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="163" column="1" bodyfile="tmap/lshforest.cc" bodystart="144" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a1731bf94cd09e7ebc4a10dd42145dc51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::Store</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>Store</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Write / serialize the current LSH forest to the disk. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The location where the LSH forest should be stored on disk. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="170" column="1" bodyfile="tmap/lshforest.cc" bodystart="150" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a869273bd3d4c72c4c296dc42519558c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::Restore</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>Restore</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Read / deserialize a LSH forest instance form the disk. The forest is indexed automatically. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The location from where to load the LSH forest. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="178" column="1" bodyfile="tmap/lshforest.cc" bodystart="159" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a78106dd9e3a9a9ec012e5405445be78c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::GetHash</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>GetHash</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the MinHash of an entry at a given index. The index is defined by order of insertion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (order of insertion) of a entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The MinHash associated with an index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="187" column="1" bodyfile="tmap/lshforest.cc" bodystart="173" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a3b7e2142901c7d42ff6d0d31de078f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::GetKNNGraph</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;from, std::vector&lt; uint32_t &gt; &amp;to, std::vector&lt; float &gt; &amp;weight, unsigned int k, unsigned int kc=10)</argsstring>
        <name>GetKNNGraph</name>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbor graph of the data stored in this LSH forest instance. It will be written to out parameters as an edge list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">from</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the from vertices will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">to</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the to vertices will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the float weights of the edges will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The degree of the nearest neighbor graph. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results are picked to create the k-nearest neighbor graph. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="203" column="1" bodyfile="tmap/lshforest.cc" bodystart="352" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1aabeaf82b4aac9a1965c4a48b65b9895f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; tmap::LSHForest::QueryLinearScan</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int k, unsigned int kc=10)</argsstring>
        <name>QueryLinearScan</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of a query. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="220" column="1" bodyfile="tmap/lshforest.cc" bodystart="179" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a168ac3398d9f43b280dba3481c145179" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; tmap::LSHForest::QueryLinearScanExclude</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int k, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int kc=10)</argsstring>
        <name>QueryLinearScanExclude</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of a query except those defined in the argument exclude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="237" column="1" bodyfile="tmap/lshforest.cc" bodystart="193" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1aacdadf3d1b559f690692e6e25bfb816e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; tmap::LSHForest::QueryLinearScanById</definition>
        <argsstring>(uint32_t id, unsigned int k, unsigned int kc=10)</argsstring>
        <name>QueryLinearScanById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of an entry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="254" column="1" bodyfile="tmap/lshforest.cc" bodystart="208" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1acf55212ce9875726bb6d00b3a870c2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; tmap::LSHForest::QueryLinearScanExcludeById</definition>
        <argsstring>(uint32_t id, unsigned int k, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int kc=10)</argsstring>
        <name>QueryLinearScanExcludeById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of an entry except those defined in the argument exclude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="272" column="1" bodyfile="tmap/lshforest.cc" bodystart="221" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a452e1020000d47c1464165664c70af8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; tmap::LSHForest::LinearScan</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, std::vector&lt; uint32_t &gt; &amp;indices, unsigned int k=10)</argsstring>
        <name>LinearScan</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of a query using linear scan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to on which to run the linear scan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="287" column="1" bodyfile="tmap/lshforest.cc" bodystart="235" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a0da6325b50a92db6ff6c49bd62a5e95b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::Query</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int k)</argsstring>
        <name>Query</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="299" column="1" bodyfile="tmap/lshforest.cc" bodystart="267" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a7aba9b1df0273b71ed2d9233d05ed0db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::QueryExclude</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int k)</argsstring>
        <name>QueryExclude</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. Exclude a list of entries by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="310" column="1" bodyfile="tmap/lshforest.cc" bodystart="282" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1aa200b72cc60947e5e03fd72ea726a999" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::QueryById</definition>
        <argsstring>(uint32_t id, unsigned int k)</argsstring>
        <name>QueryById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="321" column="1" bodyfile="tmap/lshforest.cc" bodystart="299" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a0bcdb607c4e08e0e620b4d1d1dd12f86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::QueryExcludeById</definition>
        <argsstring>(uint32_t id, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int k)</argsstring>
        <name>QueryExcludeById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. Exclude a list of entries by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="332" column="1" bodyfile="tmap/lshforest.cc" bodystart="310" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1adec697793677c79683490b776ae8642c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; uint32_t &gt; &gt; tmap::LSHForest::BatchQuery</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;vecs, unsigned int k)</argsstring>
        <name>BatchQuery</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>vecs</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors (parallelized). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of MinHashes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;uint32_t&gt;&gt; A vector of the indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="344" column="1" bodyfile="tmap/lshforest.cc" bodystart="323" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a5aad873dbf746403a5dd2962ca636f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::GetAllNearestNeighbors</definition>
        <argsstring>(unsigned int k, unsigned int kc=10)</argsstring>
        <name>GetAllNearestNeighbors</name>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of all LSH forest entries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The IDs of the nearest neighbors of all LSH forest entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="358" column="1" bodyfile="tmap/lshforest.cc" bodystart="336" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ac4ec080057307f69548e6ca756ce5609" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::GetData</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>GetData</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the MinHash of an entry at a given index. The index is defined by order of insertion. Alias for GetHash. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (order of insertion) of a entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The MinHash associated with an index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="368" column="1" bodyfile="tmap/lshforest.cc" bodystart="127" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a438a46f67fb257ae85c3dd16e8b194df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; tmap::LSHForest::GetAllDistances</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec)</argsstring>
        <name>GetAllDistances</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Get the distances of a MinHash to all entries in the LSH forest. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; The distances form the input MinHash to all the entries in the LSH forest. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="377" column="1" bodyfile="tmap/lshforest.cc" bodystart="578" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ab1c5e002deea04a625ab141f280bab92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tmap::LSHForest::GetDistance</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec_a, const std::vector&lt; uint32_t &gt; &amp;vec_b)</argsstring>
        <name>GetDistance</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_a</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec_a</parametername>
</parameternamelist>
<parameterdescription>
<para>A MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec_b</parametername>
</parameternamelist>
<parameterdescription>
<para>A MinHash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="386" column="1" bodyfile="tmap/lshforest.cc" bodystart="591" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1aa6c035b27040909b3d7a8782ad1c63b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tmap::LSHForest::GetWeightedDistance</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec_a, const std::vector&lt; uint32_t &gt; &amp;vec_b)</argsstring>
        <name>GetWeightedDistance</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_a</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two weighted MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec_a</parametername>
</parameternamelist>
<parameterdescription>
<para>A weighted MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec_b</parametername>
</parameternamelist>
<parameterdescription>
<para>A weighted MinHash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="396" column="1" bodyfile="tmap/lshforest.cc" bodystart="604" bodyend="613"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a8fc81622125b40114951a61cbe90863f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tmap::LSHForest::GetDistanceById</definition>
        <argsstring>(uint32_t a, uint32_t b)</argsstring>
        <name>GetDistanceById</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="406" column="1" bodyfile="tmap/lshforest.cc" bodystart="616" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ab00052289bb6bea152e6024049eebcc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float tmap::LSHForest::GetWeightedDistanceById</definition>
        <argsstring>(uint32_t a, uint32_t b)</argsstring>
        <name>GetWeightedDistanceById</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two weighted MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="415" column="1" bodyfile="tmap/lshforest.cc" bodystart="625" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a9ee2595fb0f85d917989234ab4aaee8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Remove all entries and the index from the LSH forest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="426" column="1" bodyfile="tmap/lshforest.cc" bodystart="640" bodyend="668"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a8ba5c1f500e915c6717c64ac24744874" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t tmap::LSHForest::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get the number of entries. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="433" column="1" bodyfile="tmap/lshforest.cc" bodystart="634" bodyend="637"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ab6a7383a94d8f3d0bfe8eaf87a83b89e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t tmap::LSHForest::Swap</definition>
        <argsstring>(uint32_t i)</argsstring>
        <name>Swap</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Byteswap a 32-bit unsigned integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>A 32-bit unsigned integer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="453" column="1" bodyfile="tmap/lshforest.cc" bodystart="526" bodyend="530"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a675ec2992594b7de64098479d902af9e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; tmap::LSHForest::Swap</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; vec)</argsstring>
        <name>Swap</name>
        <param>
          <type>std::vector&lt; uint32_t &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Byteswap all 32-bit unsigned integers in a vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="461" column="1" bodyfile="tmap/lshforest.cc" bodystart="533" bodyend="541"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a2235f35382fcefeb16575b537ffde02b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; uint32_t &gt; &gt; tmap::LSHForest::Swap</definition>
        <argsstring>(std::vector&lt; std::vector&lt; uint32_t &gt;&gt; vecs)</argsstring>
        <name>Swap</name>
        <param>
          <type>std::vector&lt; std::vector&lt; uint32_t &gt;&gt;</type>
          <declname>vecs</declname>
        </param>
        <briefdescription>
<para>Bytesap all 32-bit unsigned integers in a vector of vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of vectors of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;uint32_t&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="469" column="1" bodyfile="tmap/lshforest.cc" bodystart="544" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ab11ee9e3ef4c9866b5270417255f20eb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; uint8_t &gt; &gt; tmap::LSHForest::GetKeysFromHashtable</definition>
        <argsstring>(spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt;, SimpleHash &gt; hashtable)</argsstring>
        <name>GetKeysFromHashtable</name>
        <param>
          <type>spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt;, <ref refid="structtmap_1_1SimpleHash" kindref="compound">SimpleHash</ref> &gt;</type>
          <declname>hashtable</declname>
        </param>
        <briefdescription>
<para>Get the keys from a spp sparse hash map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hashtable</parametername>
</parameternamelist>
<parameterdescription>
<para>A spp sparse hash map. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;uint8_t&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="478" column="1" bodyfile="tmap/lshforest.cc" bodystart="671" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1ad8404030c8b42a0081b254ce44ce0e8f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; tmap::LSHForest::Hash</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; vec)</argsstring>
        <name>Hash</name>
        <param>
          <type>std::vector&lt; uint32_t &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Hash a vector of 32-bit unsigned integers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint8_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="489" column="1" bodyfile="tmap/lshforest.cc" bodystart="501" bodyend="509"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a4bd94ac93808d29f06572c7bca68b9d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; tmap::LSHForest::Hash</definition>
        <argsstring>(std::vector&lt; std::vector&lt; uint32_t &gt;&gt; vecs)</argsstring>
        <name>Hash</name>
        <param>
          <type>std::vector&lt; std::vector&lt; uint32_t &gt;&gt;</type>
          <declname>vecs</declname>
        </param>
        <briefdescription>
<para>Hash a vector of vectors of 32-bit unsigned integers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of vectors of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint8_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="497" column="1" bodyfile="tmap/lshforest.cc" bodystart="512" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1aa5163edbebbe53935afaa159e76378a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int tmap::LSHForest::BinarySearch</definition>
        <argsstring>(unsigned int n, const std::function&lt; bool(unsigned int)&gt; &amp;fn)</argsstring>
        <name>BinarySearch</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(unsigned int)&gt; &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Helper method to run a binary search. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that is evaluated in the search. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="506" column="1" bodyfile="tmap/lshforest.cc" bodystart="559" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a3a6a1622e6e632482f3f21b41b9f6d09" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::QueryInternal</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int r, std::set&lt; uint32_t &gt; &amp;results, unsigned int k)</argsstring>
        <name>QueryInternal</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::set&lt; uint32_t &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>The internal LSH forest query. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree depth / search depth. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the results of the search are written to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="518" column="1" bodyfile="tmap/lshforest.cc" bodystart="387" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="classtmap_1_1LSHForest_1a1afc68344dd9bd364c0346c375651b01" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tmap::LSHForest::QueryInternalExclude</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int r, std::set&lt; uint32_t &gt; &amp;results, unsigned int k, std::vector&lt; uint32_t &gt; &amp;exclude)</argsstring>
        <name>QueryInternalExclude</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::set&lt; uint32_t &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <briefdescription>
<para>The internal LSH forest query with exclusions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree depth / search depth. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the results of the search are written to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of entry IDs to be excluded from the search. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/lshforest.hh" line="532" column="1" bodyfile="tmap/lshforest.cc" bodystart="443" bodyend="498"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides locality sensitive hashing forest functionalities. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="tmap/lshforest.hh" line="113" column="1" bodyfile="tmap/lshforest.hh" bodystart="112" bodyend="537"/>
    <listofallmembers>
      <member refid="classtmap_1_1LSHForest_1a480d0de16bc1e4b1365bf97b9b60223a" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Add</name></member>
      <member refid="classtmap_1_1LSHForest_1ab3f73f59918a37b63662679461828cbb" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>BatchAdd</name></member>
      <member refid="classtmap_1_1LSHForest_1adec697793677c79683490b776ae8642c" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>BatchQuery</name></member>
      <member refid="classtmap_1_1LSHForest_1aa5163edbebbe53935afaa159e76378a7" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>BinarySearch</name></member>
      <member refid="classtmap_1_1LSHForest_1aabb23f14c1f7d76a1741dc33d9e51d3c" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>clean_</name></member>
      <member refid="classtmap_1_1LSHForest_1a9ee2595fb0f85d917989234ab4aaee8d" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Clear</name></member>
      <member refid="classtmap_1_1LSHForest_1ae03e66c3187aa02754b8bc3fc48efb4d" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>d_</name></member>
      <member refid="classtmap_1_1LSHForest_1a6b7cb1e666ac685746d811126a6f0788" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>data_</name></member>
      <member refid="classtmap_1_1LSHForest_1a68a849c2293744ce6ae973e5d26ceef4" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>file_backed_</name></member>
      <member refid="classtmap_1_1LSHForest_1a438a46f67fb257ae85c3dd16e8b194df" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetAllDistances</name></member>
      <member refid="classtmap_1_1LSHForest_1a5aad873dbf746403a5dd2962ca636f70" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetAllNearestNeighbors</name></member>
      <member refid="classtmap_1_1LSHForest_1ac4ec080057307f69548e6ca756ce5609" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetData</name></member>
      <member refid="classtmap_1_1LSHForest_1ab1c5e002deea04a625ab141f280bab92" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetDistance</name></member>
      <member refid="classtmap_1_1LSHForest_1a8fc81622125b40114951a61cbe90863f" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetDistanceById</name></member>
      <member refid="classtmap_1_1LSHForest_1a78106dd9e3a9a9ec012e5405445be78c" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetHash</name></member>
      <member refid="classtmap_1_1LSHForest_1ab11ee9e3ef4c9866b5270417255f20eb" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetKeysFromHashtable</name></member>
      <member refid="classtmap_1_1LSHForest_1a3b7e2142901c7d42ff6d0d31de078f96" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetKNNGraph</name></member>
      <member refid="classtmap_1_1LSHForest_1aa6c035b27040909b3d7a8782ad1c63b8" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetWeightedDistance</name></member>
      <member refid="classtmap_1_1LSHForest_1ab00052289bb6bea152e6024049eebcc5" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>GetWeightedDistanceById</name></member>
      <member refid="classtmap_1_1LSHForest_1ad8404030c8b42a0081b254ce44ce0e8f" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Hash</name></member>
      <member refid="classtmap_1_1LSHForest_1a4bd94ac93808d29f06572c7bca68b9d4" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Hash</name></member>
      <member refid="classtmap_1_1LSHForest_1a9af1d81da0477216a87e51a5c006d9fb" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>hashranges_</name></member>
      <member refid="classtmap_1_1LSHForest_1a5f50bc70de1b4948b2cd0626c0732f28" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>hashtables_</name></member>
      <member refid="classtmap_1_1LSHForest_1aba68c9cab8cc3c32e684e08b4f9d0a33" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Index</name></member>
      <member refid="classtmap_1_1LSHForest_1a7785c1a7f17eddd5e943db4b5d6d7cf2" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>IsClean</name></member>
      <member refid="classtmap_1_1LSHForest_1a335cda32466ccb96b08709bc9a3cc890" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>k_</name></member>
      <member refid="classtmap_1_1LSHForest_1a24a8cf97f3d63ead2768acf8e0c3d8fa" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>l_</name></member>
      <member refid="classtmap_1_1LSHForest_1a452e1020000d47c1464165664c70af8a" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>LinearScan</name></member>
      <member refid="classtmap_1_1LSHForest_1a90a9f6e40e63f90838c7ece0e0e3ec25" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>LSHForest</name></member>
      <member refid="classtmap_1_1LSHForest_1a0da6325b50a92db6ff6c49bd62a5e95b" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Query</name></member>
      <member refid="classtmap_1_1LSHForest_1aa200b72cc60947e5e03fd72ea726a999" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryById</name></member>
      <member refid="classtmap_1_1LSHForest_1a7aba9b1df0273b71ed2d9233d05ed0db" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryExclude</name></member>
      <member refid="classtmap_1_1LSHForest_1a0bcdb607c4e08e0e620b4d1d1dd12f86" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryExcludeById</name></member>
      <member refid="classtmap_1_1LSHForest_1a3a6a1622e6e632482f3f21b41b9f6d09" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryInternal</name></member>
      <member refid="classtmap_1_1LSHForest_1a1afc68344dd9bd364c0346c375651b01" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryInternalExclude</name></member>
      <member refid="classtmap_1_1LSHForest_1aabeaf82b4aac9a1965c4a48b65b9895f" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryLinearScan</name></member>
      <member refid="classtmap_1_1LSHForest_1aacdadf3d1b559f690692e6e25bfb816e" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryLinearScanById</name></member>
      <member refid="classtmap_1_1LSHForest_1a168ac3398d9f43b280dba3481c145179" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryLinearScanExclude</name></member>
      <member refid="classtmap_1_1LSHForest_1acf55212ce9875726bb6d00b3a870c2ef" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>QueryLinearScanExcludeById</name></member>
      <member refid="classtmap_1_1LSHForest_1a869273bd3d4c72c4c296dc42519558c8" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Restore</name></member>
      <member refid="classtmap_1_1LSHForest_1a8ba5c1f500e915c6717c64ac24744874" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>size</name></member>
      <member refid="classtmap_1_1LSHForest_1ad9a6dbe4c57320d45683e87a9894fd13" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>size_</name></member>
      <member refid="classtmap_1_1LSHForest_1a2e195f4ba7d59af6b833c6096a95f118" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>sorted_hashtable_pointers_</name></member>
      <member refid="classtmap_1_1LSHForest_1a1731bf94cd09e7ebc4a10dd42145dc51" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Store</name></member>
      <member refid="classtmap_1_1LSHForest_1a43d398f5d4969af3c9b434cd75ec0e02" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>store_</name></member>
      <member refid="classtmap_1_1LSHForest_1ab6a7383a94d8f3d0bfe8eaf87a83b89e" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Swap</name></member>
      <member refid="classtmap_1_1LSHForest_1a675ec2992594b7de64098479d902af9e" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Swap</name></member>
      <member refid="classtmap_1_1LSHForest_1a2235f35382fcefeb16575b537ffde02b" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>Swap</name></member>
      <member refid="classtmap_1_1LSHForest_1ae360cd3968379632b68084f98f0c14c2" prot="private" virt="non-virtual"><scope>tmap::LSHForest</scope><name>weighted_</name></member>
      <member refid="classtmap_1_1LSHForest_1a3ab5789f702f9dac3f801c7b9d53afd4" prot="public" virt="non-virtual"><scope>tmap::LSHForest</scope><name>~LSHForest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
