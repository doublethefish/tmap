<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classLSHForest" kind="class" language="C++" prot="public">
    <compoundname>LSHForest</compoundname>
    <includes refid="lshforest_8hh" local="no">lshforest.hh</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classLSHForest_1a45149bc08be293a0596671e8cfb85865" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int LSHForest::d_</definition>
        <argsstring></argsstring>
        <name>d_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="365" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1a4d22beb462272e3ed690cfe65df6bfcc" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int LSHForest::l_</definition>
        <argsstring></argsstring>
        <name>l_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="365" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1adf47e3f3545cd794f6bdb764cf4329ac" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int LSHForest::k_</definition>
        <argsstring></argsstring>
        <name>k_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="365" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1ad92d1f95531aef7ee92fa06750deca61" prot="private" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long LSHForest::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="366" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1a1f53f040fbf630f4544e12b59b350a7c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LSHForest::clean_</definition>
        <argsstring></argsstring>
        <name>clean_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="367" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1a182545aba8196feb332bf5ac0e60047a" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LSHForest::store_</definition>
        <argsstring></argsstring>
        <name>store_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="367" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1a4ac6c970b25e6d87b0c87359bf1ee869" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LSHForest::file_backed_</definition>
        <argsstring></argsstring>
        <name>file_backed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="367" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1ad125ee416675ed5c6225849262b7811e" prot="private" static="no" mutable="no">
        <type>std::vector&lt; spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt;, <ref refid="structSimpleHash" kindref="compound">SimpleHash</ref> &gt; &gt;</type>
        <definition>std::vector&lt;spp::sparse_hash_map&lt;std::vector&lt;uint8_t&gt;, std::vector&lt;uint32_t&gt;, SimpleHash&gt; &gt; LSHForest::hashtables_</definition>
        <argsstring></argsstring>
        <name>hashtables_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="368" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="368" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1ada7eb547f10bec64c76d9efc271744c7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::tuple&lt; uint32_t, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt;std::tuple&lt;uint32_t, uint32_t&gt; &gt; LSHForest::hashranges_</definition>
        <argsstring></argsstring>
        <name>hashranges_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="369" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="369" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1afb36d22f5283ff15782f8502f947edbd" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; <ref refid="structMapKeyPointer" kindref="compound">MapKeyPointer</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;MapKeyPointer&gt; &gt; LSHForest::sorted_hashtable_pointers_</definition>
        <argsstring></argsstring>
        <name>sorted_hashtable_pointers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="370" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="370" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLSHForest_1a9ef5e3c4a7acb612167ca22360fce09c" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;uint32_t&gt; &gt; LSHForest::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="371" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="371" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classLSHForest_1ae227bb302c173481a129335fa581fa6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LSHForest::LSHForest</definition>
        <argsstring>(unsigned int d=128, unsigned int l=8, bool store=true, bool file_backed=false)</argsstring>
        <name>LSHForest</name>
        <param>
          <type>unsigned int</type>
          <declname>d</declname>
          <defval>128</defval>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>l</declname>
          <defval>8</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>store</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>file_backed</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Construct a new <ref refid="classLSHForest" kindref="compound">LSHForest</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>d</parametername>
</parameternamelist>
<parameterdescription>
<para>The dimensionality of the MinHashes to be added to this <ref refid="classLSHForest" kindref="compound">LSHForest</ref>. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of prefix trees used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>store</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether or not to store the data for later enhanced (using parameter kc) retrievel. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file_backed</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to store the data on disk rather than in RAM (experimental). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="113" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="12" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1ac2e048b53de7268b2b16da47b99a3955" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LSHForest::~LSHForest</definition>
        <argsstring>()</argsstring>
        <name>~LSHForest</name>
        <briefdescription>
<para>Destroy the <ref refid="classLSHForest" kindref="compound">LSHForest</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="119" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a000536ff09a94df528a1f72ffa40bac3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::Add</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;vec)</argsstring>
        <name>Add</name>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Add a MinHash to this <ref refid="classLSHForest" kindref="compound">LSHForest</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A MinHash vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="126" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="27" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a668dc958bfc4856f26a96a4aa0897e53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::BatchAdd</definition>
        <argsstring>(std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;vecs)</argsstring>
        <name>BatchAdd</name>
        <param>
          <type>std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>vecs</declname>
        </param>
        <briefdescription>
<para>Add Minhashes to this <ref refid="classLSHForest" kindref="compound">LSHForest</ref> (parallelized). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector containing MinHash vectors. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="133" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="53" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1afdd95ab82907622f9a38a386766a53d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::Index</definition>
        <argsstring>()</argsstring>
        <name>Index</name>
        <briefdescription>
<para>Create the index (trees). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="139" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="96" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1af7cbc237713af39831aeab21541dafcf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool LSHForest::IsClean</definition>
        <argsstring>()</argsstring>
        <name>IsClean</name>
        <briefdescription>
<para>Check whether the added MinHashes have been indexed. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="147" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a758c5329128f5ab3723a98b77bbc4634" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::Store</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>Store</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Write / serialize the current LSH forest to the disk. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The location where the LSH forest should be stored on disk. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="154" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="137" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1aae4d0534e33a6ac46b56eeb7630916f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::Restore</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>Restore</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Read / deserialize a LSH forest instance form the disk. The forest is indexed automatically. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>The location from where to load the LSH forest. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="161" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="145" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1aec42a8cb3d1caf12faeb8d0f9ea09529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::GetHash</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>GetHash</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the MinHash of an entry at a given index. The index is defined by order of insertion. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (order of insertion) of a entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The MinHash associated with an index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="169" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="158" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a6c84d67e979b5bfd6123e62e1350dbf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::GetKNNGraph</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; &amp;from, std::vector&lt; uint32_t &gt; &amp;to, std::vector&lt; float &gt; &amp;weight, unsigned int k, unsigned int kc=10, bool weighted=false)</argsstring>
        <name>GetKNNGraph</name>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>weight</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbor graph of the data stored in this LSH forest instance. It will be written to out parameters as an edge list. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">from</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the from vertices will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">to</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the to vertices will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">weight</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the float weights of the edges will be written. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The degree of the nearest neighbor graph. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results are picked to create the k-nearest neighbor graph. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="181" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="296" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1aa655ed6c39050b45b73a051abe51e035" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; LSHForest::QueryLinearScan</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int k, unsigned int kc=10, bool weighted=false)</argsstring>
        <name>QueryLinearScan</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of a query. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="192" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="163" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a932c426296cbd6da0e7c29cd4212f3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; LSHForest::QueryLinearScanExclude</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int k, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int kc=10, bool weighted=false)</argsstring>
        <name>QueryLinearScanExclude</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of a query except those defined in the argument exclude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="204" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="172" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1afe623496f801357e8f555259620bc174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; LSHForest::QueryLinearScanById</definition>
        <argsstring>(uint32_t id, unsigned int k, unsigned int kc=10, bool weighted=false)</argsstring>
        <name>QueryLinearScanById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of an entry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="215" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="181" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a5cdb395444dad71ba95e2000bb896454" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; LSHForest::QueryLinearScanExcludeById</definition>
        <argsstring>(uint32_t id, unsigned int k, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int kc=10, bool weighted=false)</argsstring>
        <name>QueryLinearScanExcludeById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of an entry except those defined in the argument exclude. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="227" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="189" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a5d5b1675caaa17d9c2a4ba8c95c645a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::pair&lt; float, uint32_t &gt; &gt; LSHForest::LinearScan</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, std::vector&lt; uint32_t &gt; &amp;indices, unsigned int k=0, bool weighted=false)</argsstring>
        <name>LinearScan</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of a query using linear scan. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>indices</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to on which to run the linear scan. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of k-nearest neighbors to return. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::pair&lt;float, uint32_t&gt;&gt; The distances and indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="238" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="197" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a6bc39aa54083ede4ab9ba1b0f12c7229" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::Query</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int k)</argsstring>
        <name>Query</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="247" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="223" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1ada7ea3fd5c3eb9fc05188a0054de48cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::QueryExclude</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int k)</argsstring>
        <name>QueryExclude</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. Exclude a list of entries by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="257" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="238" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1ade573cce99526ba05341dd506673ea8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::QueryById</definition>
        <argsstring>(uint32_t id, unsigned int k)</argsstring>
        <name>QueryById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="266" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="253" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a50da7a1db11f709c54e5e05fd5b08aa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::QueryExcludeById</definition>
        <argsstring>(uint32_t id, std::vector&lt; uint32_t &gt; &amp;exclude, unsigned int k)</argsstring>
        <name>QueryExcludeById</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors. Exclude a list of entries by ID. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of the query entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A list of indices to be excluded from the search. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="276" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="261" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a23e5fd430b95580e09126ba58bde32a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; uint32_t &gt; &gt; LSHForest::BatchQuery</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;vecs, unsigned int k)</argsstring>
        <name>BatchQuery</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; uint32_t &gt;&gt; &amp;</type>
          <declname>vecs</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>Query the LSH forest for k-nearest neighbors (parallelized). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of MinHashes. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;uint32_t&gt;&gt; A vector of the indices of the k-nearest neighbors. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="285" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="269" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1ac741709bb8e322c68a5749c023147bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::GetAllNearestNeighbors</definition>
        <argsstring>(unsigned int k, unsigned int kc=10, bool weighted=false)</argsstring>
        <name>GetAllNearestNeighbors</name>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>kc</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>weighted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Get the k-nearest neighbors of all LSH forest entries. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>kc</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar by which k is multiplied before querying the LSH forest. The results are then ordered decreasing based on linear-scan distances and the top k results returned. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>weighted</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether the MinHashes contained within this instance of an LSH forest are weighted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The IDs of the nearest neighbors of all LSH forest entries. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="295" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="281" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1aad89848405eebc847c18a75b618da3e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::GetData</definition>
        <argsstring>(uint32_t id)</argsstring>
        <name>GetData</name>
        <param>
          <type>uint32_t</type>
          <declname>id</declname>
        </param>
        <briefdescription>
<para>Get the MinHash of an entry at a given index. The index is defined by order of insertion. Alias for GetHash. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The index (order of insertion) of a entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; The MinHash associated with an index. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="303" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="113" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1abdc3bd3357708bb58e6d957376e92f1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt; float &gt; LSHForest::GetAllDistances</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec)</argsstring>
        <name>GetAllDistances</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Get the distances of a MinHash to all entries in the LSH forest. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;float&gt; The distances form the input MinHash to all the entries in the LSH forest. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="311" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="516" bodyend="527"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a08d66568664bdc8e0148c18b18a1b8fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LSHForest::GetDistance</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec_a, const std::vector&lt; uint32_t &gt; &amp;vec_b)</argsstring>
        <name>GetDistance</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_a</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec_a</parametername>
</parameternamelist>
<parameterdescription>
<para>A MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec_b</parametername>
</parameternamelist>
<parameterdescription>
<para>A MinHash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="320" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="529" bodyend="538"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1acfb878c731daf8da6402e7cebc2b6ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LSHForest::GetWeightedDistance</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec_a, const std::vector&lt; uint32_t &gt; &amp;vec_b)</argsstring>
        <name>GetWeightedDistance</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_a</declname>
        </param>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec_b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two weighted MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec_a</parametername>
</parameternamelist>
<parameterdescription>
<para>A weighted MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>vec_b</parametername>
</parameternamelist>
<parameterdescription>
<para>A weighted MinHash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="329" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="540" bodyend="548"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a49ad1fe0429121a8b572cde4df973d96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LSHForest::GetDistanceById</definition>
        <argsstring>(uint32_t a, uint32_t b)</argsstring>
        <name>GetDistanceById</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="338" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="550" bodyend="556"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a72b5a201bc8c409c0c5742587988ba85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float LSHForest::GetWeightedDistanceById</definition>
        <argsstring>(uint32_t a, uint32_t b)</argsstring>
        <name>GetWeightedDistanceById</name>
        <param>
          <type>uint32_t</type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Get the distance between two weighted MinHashes. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>The id of an LSH forest entry. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>float </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="347" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="558" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1aec34dc5185166dce9c22a4060ce3914c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::Clear</definition>
        <argsstring>()</argsstring>
        <name>Clear</name>
        <briefdescription>
<para>Remove all entries and the index from the LSH forest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="356" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="571" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1af0015fae65afd25bf67875d12dc0d663" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t LSHForest::size</definition>
        <argsstring>()</argsstring>
        <name>size</name>
        <briefdescription>
<para>Get the number of entries. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="363" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="566" bodyend="569"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classLSHForest_1a88fb06c62d56809e60eb5686d8849b6f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t LSHForest::Swap</definition>
        <argsstring>(uint32_t i)</argsstring>
        <name>Swap</name>
        <param>
          <type>uint32_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Byteswap a 32-bit unsigned integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>i</parametername>
</parameternamelist>
<parameterdescription>
<para>A 32-bit unsigned integer. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="379" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="468" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a82cdcfc1244e6769cf9da2ed6f367e53" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint32_t &gt;</type>
        <definition>std::vector&lt; uint32_t &gt; LSHForest::Swap</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; vec)</argsstring>
        <name>Swap</name>
        <param>
          <type>std::vector&lt; uint32_t &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Byteswap all 32-bit unsigned integers in a vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint32_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="387" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="473" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a76e38e07dc675e7f0383e5a42299dc29" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; uint32_t &gt; &gt; LSHForest::Swap</definition>
        <argsstring>(std::vector&lt; std::vector&lt; uint32_t &gt;&gt; vecs)</argsstring>
        <name>Swap</name>
        <param>
          <type>std::vector&lt; std::vector&lt; uint32_t &gt;&gt;</type>
          <declname>vecs</declname>
        </param>
        <briefdescription>
<para>Bytesap all 32-bit unsigned integers in a vector of vectors. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of vectors of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;uint32_t&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="395" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="483" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a5fb871d8500fa3cc359be02424c8e219" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint8_t &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt; uint8_t &gt; &gt; LSHForest::GetKeysFromHashtable</definition>
        <argsstring>(spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt;, SimpleHash &gt; hashtable)</argsstring>
        <name>GetKeysFromHashtable</name>
        <param>
          <type>spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt;, <ref refid="structSimpleHash" kindref="compound">SimpleHash</ref> &gt;</type>
          <declname>hashtable</declname>
        </param>
        <briefdescription>
<para>Get the keys from a spp sparse hash map. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hashtable</parametername>
</parameternamelist>
<parameterdescription>
<para>A spp sparse hash map. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;std::vector&lt;uint8_t&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="403" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="597" bodyend="605"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1acca6b92e3d8406f54e978158beab3312" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; LSHForest::Hash</definition>
        <argsstring>(std::vector&lt; uint32_t &gt; vec)</argsstring>
        <name>Hash</name>
        <param>
          <type>std::vector&lt; uint32_t &gt;</type>
          <declname>vec</declname>
        </param>
        <briefdescription>
<para>Hash a vector of 32-bit unsigned integers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint8_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="411" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="445" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1affab387aa776a6589692705668938691" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt; uint8_t &gt; LSHForest::Hash</definition>
        <argsstring>(std::vector&lt; std::vector&lt; uint32_t &gt;&gt; vecs)</argsstring>
        <name>Hash</name>
        <param>
          <type>std::vector&lt; std::vector&lt; uint32_t &gt;&gt;</type>
          <declname>vecs</declname>
        </param>
        <briefdescription>
<para>Hash a vector of vectors of 32-bit unsigned integers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vecs</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of vectors of 32-bit unsigned integers. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;uint8_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="419" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="455" bodyend="466"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a43248f1b354cce78c2c2567464f0481e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int LSHForest::BinarySearch</definition>
        <argsstring>(unsigned int n, const std::function&lt; bool(unsigned int)&gt; &amp;fn)</argsstring>
        <name>BinarySearch</name>
        <param>
          <type>unsigned int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const std::function&lt; bool(unsigned int)&gt; &amp;</type>
          <declname>fn</declname>
        </param>
        <briefdescription>
<para>Helper method to run a binary search. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>n</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fn</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that is evaluated in the search. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>unsigned int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="428" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="498" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1ac410657089c42d566d542429ca11d1d4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::QueryInternal</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int r, std::set&lt; uint32_t &gt; &amp;results, unsigned int k)</argsstring>
        <name>QueryInternal</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::set&lt; uint32_t &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <briefdescription>
<para>The internal LSH forest query. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree depth / search depth. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results[out]</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the results of the search are written to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nearest neighbors to search for. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="438" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="326" bodyend="383"/>
      </memberdef>
      <memberdef kind="function" id="classLSHForest_1a5106f54d005d3a443071eac51dda6511" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LSHForest::QueryInternalExclude</definition>
        <argsstring>(const std::vector&lt; uint32_t &gt; &amp;vec, unsigned int r, std::set&lt; uint32_t &gt; &amp;results, unsigned int k, std::vector&lt; uint32_t &gt; &amp;exclude)</argsstring>
        <name>QueryInternalExclude</name>
        <param>
          <type>const std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>r</declname>
        </param>
        <param>
          <type>std::set&lt; uint32_t &gt; &amp;</type>
          <declname>results</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>std::vector&lt; uint32_t &gt; &amp;</type>
          <declname>exclude</declname>
        </param>
        <briefdescription>
<para>The internal LSH forest query with exclusions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vec</parametername>
</parameternamelist>
<parameterdescription>
<para>The query MinHash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>The tree depth / search depth. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>results</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector to which the results of the search are written to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>exclude</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of entry IDs to be excluded from the search. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="449" column="1" bodyfile="src/tmap/lshforest.cc" bodystart="385" bodyend="443"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides locality sensitive hashing forest functionalities. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/tmap/lshforest.hh" line="103" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="102" bodyend="450"/>
    <listofallmembers>
      <member refid="classLSHForest_1a000536ff09a94df528a1f72ffa40bac3" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>Add</name></member>
      <member refid="classLSHForest_1a668dc958bfc4856f26a96a4aa0897e53" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>BatchAdd</name></member>
      <member refid="classLSHForest_1a23e5fd430b95580e09126ba58bde32a4" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>BatchQuery</name></member>
      <member refid="classLSHForest_1a43248f1b354cce78c2c2567464f0481e" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>BinarySearch</name></member>
      <member refid="classLSHForest_1a1f53f040fbf630f4544e12b59b350a7c" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>clean_</name></member>
      <member refid="classLSHForest_1aec34dc5185166dce9c22a4060ce3914c" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>Clear</name></member>
      <member refid="classLSHForest_1a45149bc08be293a0596671e8cfb85865" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>d_</name></member>
      <member refid="classLSHForest_1a9ef5e3c4a7acb612167ca22360fce09c" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>data_</name></member>
      <member refid="classLSHForest_1a4ac6c970b25e6d87b0c87359bf1ee869" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>file_backed_</name></member>
      <member refid="classLSHForest_1abdc3bd3357708bb58e6d957376e92f1c" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetAllDistances</name></member>
      <member refid="classLSHForest_1ac741709bb8e322c68a5749c023147bde" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetAllNearestNeighbors</name></member>
      <member refid="classLSHForest_1aad89848405eebc847c18a75b618da3e1" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetData</name></member>
      <member refid="classLSHForest_1a08d66568664bdc8e0148c18b18a1b8fa" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetDistance</name></member>
      <member refid="classLSHForest_1a49ad1fe0429121a8b572cde4df973d96" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetDistanceById</name></member>
      <member refid="classLSHForest_1aec42a8cb3d1caf12faeb8d0f9ea09529" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetHash</name></member>
      <member refid="classLSHForest_1a5fb871d8500fa3cc359be02424c8e219" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>GetKeysFromHashtable</name></member>
      <member refid="classLSHForest_1a6c84d67e979b5bfd6123e62e1350dbf2" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetKNNGraph</name></member>
      <member refid="classLSHForest_1acfb878c731daf8da6402e7cebc2b6ef1" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetWeightedDistance</name></member>
      <member refid="classLSHForest_1a72b5a201bc8c409c0c5742587988ba85" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>GetWeightedDistanceById</name></member>
      <member refid="classLSHForest_1acca6b92e3d8406f54e978158beab3312" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>Hash</name></member>
      <member refid="classLSHForest_1affab387aa776a6589692705668938691" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>Hash</name></member>
      <member refid="classLSHForest_1ada7eb547f10bec64c76d9efc271744c7" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>hashranges_</name></member>
      <member refid="classLSHForest_1ad125ee416675ed5c6225849262b7811e" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>hashtables_</name></member>
      <member refid="classLSHForest_1afdd95ab82907622f9a38a386766a53d2" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>Index</name></member>
      <member refid="classLSHForest_1af7cbc237713af39831aeab21541dafcf" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>IsClean</name></member>
      <member refid="classLSHForest_1adf47e3f3545cd794f6bdb764cf4329ac" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>k_</name></member>
      <member refid="classLSHForest_1a4d22beb462272e3ed690cfe65df6bfcc" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>l_</name></member>
      <member refid="classLSHForest_1a5d5b1675caaa17d9c2a4ba8c95c645a3" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>LinearScan</name></member>
      <member refid="classLSHForest_1ae227bb302c173481a129335fa581fa6f" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>LSHForest</name></member>
      <member refid="classLSHForest_1a6bc39aa54083ede4ab9ba1b0f12c7229" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>Query</name></member>
      <member refid="classLSHForest_1ade573cce99526ba05341dd506673ea8b" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryById</name></member>
      <member refid="classLSHForest_1ada7ea3fd5c3eb9fc05188a0054de48cf" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryExclude</name></member>
      <member refid="classLSHForest_1a50da7a1db11f709c54e5e05fd5b08aa8" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryExcludeById</name></member>
      <member refid="classLSHForest_1ac410657089c42d566d542429ca11d1d4" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>QueryInternal</name></member>
      <member refid="classLSHForest_1a5106f54d005d3a443071eac51dda6511" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>QueryInternalExclude</name></member>
      <member refid="classLSHForest_1aa655ed6c39050b45b73a051abe51e035" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryLinearScan</name></member>
      <member refid="classLSHForest_1afe623496f801357e8f555259620bc174" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryLinearScanById</name></member>
      <member refid="classLSHForest_1a932c426296cbd6da0e7c29cd4212f3ff" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryLinearScanExclude</name></member>
      <member refid="classLSHForest_1a5cdb395444dad71ba95e2000bb896454" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>QueryLinearScanExcludeById</name></member>
      <member refid="classLSHForest_1aae4d0534e33a6ac46b56eeb7630916f6" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>Restore</name></member>
      <member refid="classLSHForest_1af0015fae65afd25bf67875d12dc0d663" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>size</name></member>
      <member refid="classLSHForest_1ad92d1f95531aef7ee92fa06750deca61" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>size_</name></member>
      <member refid="classLSHForest_1afb36d22f5283ff15782f8502f947edbd" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>sorted_hashtable_pointers_</name></member>
      <member refid="classLSHForest_1a758c5329128f5ab3723a98b77bbc4634" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>Store</name></member>
      <member refid="classLSHForest_1a182545aba8196feb332bf5ac0e60047a" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>store_</name></member>
      <member refid="classLSHForest_1a88fb06c62d56809e60eb5686d8849b6f" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>Swap</name></member>
      <member refid="classLSHForest_1a82cdcfc1244e6769cf9da2ed6f367e53" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>Swap</name></member>
      <member refid="classLSHForest_1a76e38e07dc675e7f0383e5a42299dc29" prot="private" virt="non-virtual"><scope>LSHForest</scope><name>Swap</name></member>
      <member refid="classLSHForest_1ac2e048b53de7268b2b16da47b99a3955" prot="public" virt="non-virtual"><scope>LSHForest</scope><name>~LSHForest</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
