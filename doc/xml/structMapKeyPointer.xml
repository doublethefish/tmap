<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structMapKeyPointer" kind="struct" language="C++" prot="public">
    <compoundname>MapKeyPointer</compoundname>
    <includes refid="lshforest_8hh" local="no">lshforest.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structMapKeyPointer_1ae2724283aeda91caa9e63c5653be4a65" prot="public" static="no">
        <type>spp::sparse_hash_map&lt; std::vector&lt; uint8_t &gt;, std::vector&lt; uint32_t &gt; &gt;::iterator</type>
        <definition>typedef spp::sparse_hash_map&lt;std::vector&lt;uint8_t&gt;, std::vector&lt;uint32_t&gt; &gt;::iterator MapKeyPointer::iterator</definition>
        <argsstring></argsstring>
        <name>iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="56" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structMapKeyPointer_1ab507d3d701fc46728b0ee1643e510edb" prot="public" static="no" mutable="no">
        <type>iterator</type>
        <definition>iterator MapKeyPointer::it</definition>
        <argsstring></argsstring>
        <name>it</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="61" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structMapKeyPointer_1a96ac4dd95d58f8e79be1e5c9c247b349" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MapKeyPointer::MapKeyPointer</definition>
        <argsstring>(iterator i)</argsstring>
        <name>MapKeyPointer</name>
        <param>
          <type>iterator</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="57" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="structMapKeyPointer_1a3a3f7e5e4b49c2d2ca1a3d40e43accf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>MapKeyPointer::MapKeyPointer</definition>
        <argsstring>()</argsstring>
        <name>MapKeyPointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="58" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="structMapKeyPointer_1a481cd84d48f25f2ff4bd102103a226d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; uint8_t &gt; &amp;</type>
        <definition>const std::vector&lt;uint8_t&gt;&amp; MapKeyPointer::operator*</definition>
        <argsstring>() const</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="59" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="structMapKeyPointer_1adf3870c8bdd7c9953fb07bb8708a7e73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; uint8_t &gt; *</type>
        <definition>const std::vector&lt;uint8_t&gt;* MapKeyPointer::operator-&gt;</definition>
        <argsstring>() const</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/tmap/lshforest.hh" line="60" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="60" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The pointer map used for pointing to the keys from the sorted hash map. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/tmap/lshforest.hh" line="55" column="1" bodyfile="src/tmap/lshforest.hh" bodystart="54" bodyend="62"/>
    <listofallmembers>
      <member refid="structMapKeyPointer_1ab507d3d701fc46728b0ee1643e510edb" prot="public" virt="non-virtual"><scope>MapKeyPointer</scope><name>it</name></member>
      <member refid="structMapKeyPointer_1ae2724283aeda91caa9e63c5653be4a65" prot="public" virt="non-virtual"><scope>MapKeyPointer</scope><name>iterator</name></member>
      <member refid="structMapKeyPointer_1a96ac4dd95d58f8e79be1e5c9c247b349" prot="public" virt="non-virtual"><scope>MapKeyPointer</scope><name>MapKeyPointer</name></member>
      <member refid="structMapKeyPointer_1a3a3f7e5e4b49c2d2ca1a3d40e43accf4" prot="public" virt="non-virtual"><scope>MapKeyPointer</scope><name>MapKeyPointer</name></member>
      <member refid="structMapKeyPointer_1a481cd84d48f25f2ff4bd102103a226d2" prot="public" virt="non-virtual"><scope>MapKeyPointer</scope><name>operator*</name></member>
      <member refid="structMapKeyPointer_1adf3870c8bdd7c9953fb07bb8708a7e73" prot="public" virt="non-virtual"><scope>MapKeyPointer</scope><name>operator-&gt;</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
