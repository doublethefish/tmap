<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="layout_8cc" kind="file" language="C++">
    <compoundname>layout.cc</compoundname>
    <includes refid="layout_8hh" local="yes">layout.hh</includes>
    <includes refid="lshforest_8hh" local="yes">lshforest.hh</includes>
    <incdepgraph>
      <node id="81">
        <label>tmap/layout.cc</label>
        <link refid="layout_8cc"/>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="110" relation="include">
        </childnode>
      </node>
      <node id="114">
        <label>functional</label>
      </node>
      <node id="120">
        <label>cereal/types/map.hpp</label>
      </node>
      <node id="118">
        <label>limits</label>
      </node>
      <node id="104">
        <label>ogdf/packing/TileToRowsCCPacker.h</label>
      </node>
      <node id="119">
        <label>cereal/archives/binary.hpp</label>
      </node>
      <node id="121">
        <label>cereal/types/tuple.hpp</label>
      </node>
      <node id="83">
        <label>stdint.h</label>
      </node>
      <node id="117">
        <label>stdexcept</label>
      </node>
      <node id="103">
        <label>ogdf/packing/ComponentSplitterLayout.h</label>
      </node>
      <node id="101">
        <label>ogdf/energybased/multilevel_mixer/SolarMerger.h</label>
      </node>
      <node id="96">
        <label>ogdf/energybased/multilevel_mixer/SolarPlacer.h</label>
      </node>
      <node id="115">
        <label>map</label>
      </node>
      <node id="88">
        <label>ogdf/basic/extended_graph_alg.h</label>
      </node>
      <node id="123">
        <label>sparsepp/spp.h</label>
      </node>
      <node id="86">
        <label>ogdf/basic/Graph.h</label>
      </node>
      <node id="107">
        <label>fstream</label>
      </node>
      <node id="110">
        <label>lshforest.hh</label>
        <link refid="lshforest_8hh"/>
        <childnode refid="111" relation="include">
        </childnode>
        <childnode refid="112" relation="include">
        </childnode>
        <childnode refid="113" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="114" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="115" relation="include">
        </childnode>
        <childnode refid="116" relation="include">
        </childnode>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="118" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="82" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
      </node>
      <node id="91">
        <label>ogdf/energybased/multilevel_mixer/ScalingLayout.h</label>
      </node>
      <node id="90">
        <label>ogdf/energybased/FastMultipoleEmbedder.h</label>
      </node>
      <node id="105">
        <label>ogdf/energybased/FMMMLayout.h</label>
      </node>
      <node id="106">
        <label>ogdf/energybased/SpringEmbedderGridVariant.h</label>
      </node>
      <node id="109">
        <label>typeinfo</label>
      </node>
      <node id="84">
        <label>tuple</label>
      </node>
      <node id="102">
        <label>ogdf/basic/PreprocessorLayout.h</label>
      </node>
      <node id="99">
        <label>ogdf/energybased/multilevel_mixer/IndependentSetMerger.h</label>
      </node>
      <node id="85">
        <label>vector</label>
      </node>
      <node id="97">
        <label>ogdf/energybased/multilevel_mixer/ZeroPlacer.h</label>
      </node>
      <node id="94">
        <label>ogdf/energybased/multilevel_mixer/MedianPlacer.h</label>
      </node>
      <node id="92">
        <label>ogdf/energybased/multilevel_mixer/BarycenterPlacer.h</label>
      </node>
      <node id="108">
        <label>iostream</label>
      </node>
      <node id="87">
        <label>ogdf/basic/GraphAttributes.h</label>
      </node>
      <node id="89">
        <label>ogdf/fileformats/GraphIO.h</label>
      </node>
      <node id="112">
        <label>chrono</label>
      </node>
      <node id="95">
        <label>ogdf/energybased/multilevel_mixer/RandomPlacer.h</label>
      </node>
      <node id="116">
        <label>set</label>
      </node>
      <node id="82">
        <label>layout.hh</label>
        <link refid="layout_8hh"/>
        <childnode refid="83" relation="include">
        </childnode>
        <childnode refid="84" relation="include">
        </childnode>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
        <childnode refid="89" relation="include">
        </childnode>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="91" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="93" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
        <childnode refid="95" relation="include">
        </childnode>
        <childnode refid="96" relation="include">
        </childnode>
        <childnode refid="97" relation="include">
        </childnode>
        <childnode refid="98" relation="include">
        </childnode>
        <childnode refid="99" relation="include">
        </childnode>
        <childnode refid="100" relation="include">
        </childnode>
        <childnode refid="101" relation="include">
        </childnode>
        <childnode refid="102" relation="include">
        </childnode>
        <childnode refid="103" relation="include">
        </childnode>
        <childnode refid="104" relation="include">
        </childnode>
        <childnode refid="105" relation="include">
        </childnode>
        <childnode refid="106" relation="include">
        </childnode>
        <childnode refid="107" relation="include">
        </childnode>
        <childnode refid="108" relation="include">
        </childnode>
        <childnode refid="109" relation="include">
        </childnode>
      </node>
      <node id="100">
        <label>ogdf/energybased/multilevel_mixer/LocalBiconnectedMerger.h</label>
      </node>
      <node id="111">
        <label>algorithm</label>
      </node>
      <node id="93">
        <label>ogdf/energybased/multilevel_mixer/CirclePlacer.h</label>
      </node>
      <node id="113">
        <label>cstring</label>
      </node>
      <node id="122">
        <label>cereal/types/vector.hpp</label>
      </node>
      <node id="98">
        <label>ogdf/energybased/multilevel_mixer/EdgeCoverMerger.h</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespaceogdf">ogdf</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="layout_8cc_1abbbea3994c72a3fb4c316c5812f4b6b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>MultilevelBuilder *</type>
        <definition>static MultilevelBuilder* GetFactoredAdjustedMerger</definition>
        <argsstring>(double factor=2.0, int adjustment=0)</argsstring>
        <name>GetFactoredAdjustedMerger</name>
        <param>
          <type>double</type>
          <declname>factor</declname>
          <defval>2.0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>adjustment</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="18" column="1" bodyfile="tmap/layout.cc" bodystart="18" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a73f0dbf69912028cc49977451db537f0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>MultilevelBuilder *</type>
        <definition>static MultilevelBuilder* GetAdjustedMerger</definition>
        <argsstring>(int adjustment=0)</argsstring>
        <name>GetAdjustedMerger</name>
        <param>
          <type>int</type>
          <declname>adjustment</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="28" column="1" bodyfile="tmap/layout.cc" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a6cd8bd75569ac3318e52a56144d33b06" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InitialPlacer *</type>
        <definition>static InitialPlacer* GetBarycenterPlacer</definition>
        <argsstring>()</argsstring>
        <name>GetBarycenterPlacer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="36" column="1" bodyfile="tmap/layout.cc" bodystart="36" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a15446d2599c9a44b779ce963af71bdd2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InitialPlacer *</type>
        <definition>static InitialPlacer* GetSolarPlacer</definition>
        <argsstring>()</argsstring>
        <name>GetSolarPlacer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="44" column="1" bodyfile="tmap/layout.cc" bodystart="44" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1acc49b9a7db9be5992d595b254c41a528" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InitialPlacer *</type>
        <definition>static InitialPlacer* GetCirclePlacer</definition>
        <argsstring>()</argsstring>
        <name>GetCirclePlacer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="51" column="1" bodyfile="tmap/layout.cc" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a81570c4c157297610aad62b55facc39f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InitialPlacer *</type>
        <definition>static InitialPlacer* GetMedianPlacer</definition>
        <argsstring>()</argsstring>
        <name>GetMedianPlacer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="58" column="1" bodyfile="tmap/layout.cc" bodystart="58" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1ad0571f9ec7e211e917ea6c139f615fb7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InitialPlacer *</type>
        <definition>static InitialPlacer* GetRandomPlacer</definition>
        <argsstring>()</argsstring>
        <name>GetRandomPlacer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="65" column="1" bodyfile="tmap/layout.cc" bodystart="65" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a380afeae5b09763bdb3f3211111ffc11" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>InitialPlacer *</type>
        <definition>static InitialPlacer* GetZeroPlacer</definition>
        <argsstring>()</argsstring>
        <name>GetZeroPlacer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="72" column="1" bodyfile="tmap/layout.cc" bodystart="72" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a3d1a42c4bf2de56742f9ae91daf0bdec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; uint32_t &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;uint32_t&gt; &gt; GetTreesFromForest</definition>
        <argsstring>(const Graph &amp;g)</argsstring>
        <name>GetTreesFromForest</name>
        <param>
          <type>const Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="79" column="1" bodyfile="tmap/layout.cc" bodystart="79" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a9327106c87138ade0644c996cfa3a631" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void RemoveDisconnectedComponents</definition>
        <argsstring>(Graph &amp;g)</argsstring>
        <name>RemoveDisconnectedComponents</name>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="106" column="1" bodyfile="tmap/layout.cc" bodystart="106" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="layout_8cc_1a8f5ba6f656daf98027e04af2c883a25f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void ConnectGraph</definition>
        <argsstring>(Graph &amp;g, std::vector&lt; node &gt; &amp;index_to_node, tmap::LSHForest &amp;lsh_forest)</argsstring>
        <name>ConnectGraph</name>
        <param>
          <type>Graph &amp;</type>
          <declname>g</declname>
        </param>
        <param>
          <type>std::vector&lt; node &gt; &amp;</type>
          <declname>index_to_node</declname>
        </param>
        <param>
          <type><ref refid="classtmap_1_1LSHForest" kindref="compound">tmap::LSHForest</ref> &amp;</type>
          <declname>lsh_forest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="tmap/layout.cc" line="135" column="1" bodyfile="tmap/layout.cc" bodystart="135" bodyend="155"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Functions used for generating graph layouts from LSHForest instances and edge lists. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Daniel Probst (<ulink url="mailto:daenuprobst@gmail.com">daenuprobst@gmail.com</ulink>) </para></simplesect>
<simplesect kind="version"><para>0.1 </para></simplesect>
<simplesect kind="date"><para>2019-06-17 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="11"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="layout_8hh" kindref="compound">layout.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="lshforest_8hh" kindref="compound">lshforest.hh</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceogdf" kindref="compound">ogdf</ref>;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MultilevelBuilder*</highlight></codeline>
<codeline lineno="18"><highlight class="normal">GetFactoredAdjustedMerger(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>factor<sp/>=<sp/>2.0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adjustment<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="19"><highlight class="normal">{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>T*<sp/>merger<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>merger-&gt;setFactor(factor);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/>merger-&gt;setEdgeLengthAdjustment(adjustment);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>merger;</highlight></codeline>
<codeline lineno="24"><highlight class="normal">}</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>MultilevelBuilder*</highlight></codeline>
<codeline lineno="28"><highlight class="normal">GetAdjustedMerger(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>adjustment<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>T*<sp/>merger<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>T();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>merger-&gt;setEdgeLengthAdjustment(adjustment);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>merger;</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InitialPlacer*</highlight></codeline>
<codeline lineno="36"><highlight class="normal">GetBarycenterPlacer()</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>BarycenterPlacer*<sp/>placer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>BarycenterPlacer();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>placer-&gt;weightedPositionPriority(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placer;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InitialPlacer*</highlight></codeline>
<codeline lineno="44"><highlight class="normal">GetSolarPlacer()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>SolarPlacer*<sp/>placer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>SolarPlacer();</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placer;</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InitialPlacer*</highlight></codeline>
<codeline lineno="51"><highlight class="normal">GetCirclePlacer()</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>CirclePlacer*<sp/>placer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>CirclePlacer();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placer;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InitialPlacer*</highlight></codeline>
<codeline lineno="58"><highlight class="normal">GetMedianPlacer()</highlight></codeline>
<codeline lineno="59"><highlight class="normal">{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/>MedianPlacer*<sp/>placer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>MedianPlacer();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placer;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InitialPlacer*</highlight></codeline>
<codeline lineno="65"><highlight class="normal">GetRandomPlacer()</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>RandomPlacer*<sp/>placer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>RandomPlacer();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placer;</highlight></codeline>
<codeline lineno="69"><highlight class="normal">}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>InitialPlacer*</highlight></codeline>
<codeline lineno="72"><highlight class="normal">GetZeroPlacer()</highlight></codeline>
<codeline lineno="73"><highlight class="normal">{</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>ZeroPlacer*<sp/>placer<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ZeroPlacer();</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>placer;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">std::vector&lt;std::vector&lt;uint32_t&gt;&gt;</highlight></codeline>
<codeline lineno="79"><highlight class="normal">GetTreesFromForest(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Graph&amp;<sp/>g)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>NodeArray&lt;int&gt;<sp/>connected_component_ids(g);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>List&lt;node&gt;<sp/>isolated_nodes;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_connected_components<sp/>=</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>connectedComponents(g,<sp/>connected_component_ids,<sp/>&amp;isolated_nodes);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;uint32_t&gt;&gt;<sp/>connected_components(</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>n_connected_components);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>n_connected_components;<sp/>i++)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>connected_components[i]<sp/>=<sp/>std::vector&lt;uint32_t&gt;();</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>:<sp/>connected_component_ids)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>connected_components[id].emplace_back(i++);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/>std::sort(connected_components.begin(),</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>connected_components.end(),</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint32_t&gt;&amp;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.size()<sp/>&gt;<sp/>b.size();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>connected_components;</highlight></codeline>
<codeline lineno="103"><highlight class="normal">}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">RemoveDisconnectedComponents(Graph&amp;<sp/>g)</highlight></codeline>
<codeline lineno="107"><highlight class="normal">{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>GraphCopy<sp/>t;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>Graph::CCsInfo<sp/>info(g);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cc<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_ccs<sp/>=<sp/>info.numberOfCCs();</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_ccs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cc_size<sp/>=<sp/>info.numberOfNodes(i);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cc_size<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>max<sp/>=<sp/>cc_size;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cc<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_ccs;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>cc)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>info.startNode(i);<sp/>j<sp/>&lt;<sp/>info.stopNode(i);<sp/>++j)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>v<sp/>=<sp/>info.v(j);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g.delNode(v);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">ConnectGraph(Graph&amp;<sp/>g,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;node&gt;&amp;<sp/>index_to_node,</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classtmap_1_1LSHForest" kindref="compound">tmap::LSHForest</ref>&amp;<sp/>lsh_forest)</highlight></codeline>
<codeline lineno="138"><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>trees<sp/>=<sp/>GetTreesFromForest(g);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>1;<sp/>i<sp/>&lt;<sp/>trees.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>v<sp/>:<sp/>trees[i])<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nns<sp/>=<sp/>lsh_forest.<ref refid="classtmap_1_1LSHForest_1acf55212ce9875726bb6d00b3a870c2ef" kindref="member">QueryLinearScanExcludeById</ref>(v,<sp/>1,<sp/>trees[i],<sp/>10);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(nns.size()<sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g.newEdge(index_to_node[v],</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_to_node[std::get&lt;1&gt;(nns[0])],</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;0&gt;(nns[0]));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>trees<sp/>=<sp/>GetTreesFromForest(g);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">std::tuple&lt;std::vector&lt;uint32_t&gt;,<sp/>std::vector&lt;uint32_t&gt;&gt;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><ref refid="layout_8hh_1a033d33fa567d893125d956e56933335f" kindref="member">tmap::MSTFromLSHForest</ref>(<ref refid="classtmap_1_1LSHForest" kindref="compound">tmap::LSHForest</ref>&amp;<sp/>lsh_forest,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>k,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>kc)</highlight></codeline>
<codeline lineno="161"><highlight class="normal">{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>EdgeWeightedGraph&lt;float&gt;<sp/>g;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vertex_count<sp/>=<sp/>lsh_forest.<ref refid="classtmap_1_1LSHForest_1a8ba5c1f500e915c6717c64ac24744874" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>from;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>to;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>weight;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>lsh_forest.<ref refid="classtmap_1_1LSHForest_1a3b7e2142901c7d42ff6d0d31de078f96" kindref="member">GetKNNGraph</ref>(from,<sp/>to,<sp/>weight,<sp/>k,<sp/>kc);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/>std::vector&lt;node&gt;<sp/>index_to_node(lsh_forest.<ref refid="classtmap_1_1LSHForest_1a8ba5c1f500e915c6717c64ac24744874" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertex_count;<sp/>i++)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>index_to_node[i]<sp/>=<sp/>g.newNode();</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;uint32_t&gt;::size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>from.size();<sp/>i++)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>g.newEdge(index_to_node[from[i]],<sp/>index_to_node[to[i]],<sp/>weight[i]);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>ogdf::makeMinimumSpanningTree(g,<sp/>g.edgeWeights());</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>x;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>y;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(edge<sp/>e<sp/>:<sp/>g.edges)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>x.emplace_back(e-&gt;source()-&gt;index());</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>y.emplace_back(e-&gt;target()-&gt;index());</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(x,<sp/>y);</highlight></codeline>
<codeline lineno="190"><highlight class="normal">}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">std::tuple&lt;std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;,</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtmap_1_1GraphProperties" kindref="compound">tmap::GraphProperties</ref>&gt;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="layout_8hh_1a1b41a97f59e18234250f76085a7d437b" kindref="member">tmap::LayoutFromLSHForest</ref>(<ref refid="classtmap_1_1LSHForest" kindref="compound">tmap::LSHForest</ref>&amp;<sp/>lsh_forest,</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtmap_1_1LayoutConfiguration" kindref="compound">tmap::LayoutConfiguration</ref><sp/>config,</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create_mst,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>clear_lsh_forest)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="structtmap_1_1GraphProperties" kindref="compound">tmap::GraphProperties</ref><sp/>gp;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>EdgeWeightedGraph&lt;float&gt;<sp/>g;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vertex_count<sp/>=<sp/>lsh_forest.<ref refid="classtmap_1_1LSHForest_1a8ba5c1f500e915c6717c64ac24744874" kindref="member">size</ref>();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>from;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>to;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>weight;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>degrees(vertex_count);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;uint32_t&gt;&gt;<sp/>adjacency_list(vertex_count);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/>lsh_forest.<ref refid="classtmap_1_1LSHForest_1a3b7e2142901c7d42ff6d0d31de078f96" kindref="member">GetKNNGraph</ref>(from,<sp/>to,<sp/>weight,<sp/>config.<ref refid="structtmap_1_1LayoutConfiguration_1a80ddc818732d708764fbd83ad7b7d153" kindref="member">k</ref>,<sp/>config.<ref refid="structtmap_1_1LayoutConfiguration_1ae63c0a1d5956cbdb837f3aff1978f867" kindref="member">kc</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(clear_lsh_forest)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>lsh_forest.<ref refid="classtmap_1_1LSHForest_1a9ee2595fb0f85d917989234ab4aaee8d" kindref="member">Clear</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>std::vector&lt;node&gt;<sp/>index_to_node(lsh_forest.<ref refid="classtmap_1_1LSHForest_1a8ba5c1f500e915c6717c64ac24744874" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertex_count;<sp/>i++)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>index_to_node[i]<sp/>=<sp/>g.newNode();</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;uint32_t&gt;::size_type<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>!=<sp/>from.size();<sp/>i++)</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(weight[i]<sp/>&gt;=<sp/>0.0f)</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>g.newEdge(index_to_node[from[i]],<sp/>index_to_node[to[i]],<sp/>weight[i]);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>ogdf::makeLoopFree(g);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>ogdf::makeParallelFreeUndirected(g);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>v<sp/>:<sp/>g.nodes)</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>degrees[i++]<sp/>=<sp/>v-&gt;degree();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/>gp.<ref refid="structtmap_1_1GraphProperties_1af4c85653b3bf56c6dbf19d7a38af40bc" kindref="member">degrees</ref><sp/>=<sp/>degrees;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(create_mst)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>gp.<ref refid="structtmap_1_1GraphProperties_1a51fa52c1cc9c8d382d507349e99447be" kindref="member">mst_weight</ref><sp/>=<sp/>ogdf::makeMinimumSpanningTree(g,<sp/>g.edgeWeights());</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>v<sp/>:<sp/>g.nodes)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>adjacency_list[i]<sp/>=<sp/>std::vector&lt;uint32_t&gt;(v-&gt;adjEntries.size());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(adjEntry<sp/>adj<sp/>:<sp/>v-&gt;adjEntries)</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adjacency_list[i][j++]<sp/>=<sp/>adj-&gt;theEdge()-&gt;opposite(v)-&gt;index();</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>gp.<ref refid="structtmap_1_1GraphProperties_1a04c11168f810fdaf8b7bfecf96413ba7" kindref="member">adjacency_list</ref><sp/>=<sp/>adjacency_list;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="layout_8hh_1a126dbc6ec8355732c528abb2877e60d4" kindref="member">LayoutInternal</ref>(g,<sp/>vertex_count,<sp/>config,<sp/>gp);</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">std::tuple&lt;std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;,</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;,</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtmap_1_1GraphProperties" kindref="compound">tmap::GraphProperties</ref>&gt;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="layout_8hh_1a780993ad8dd7e349b77f55895cc33451" kindref="member">tmap::LayoutFromEdgeList</ref>(</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/>uint32_t<sp/>vertex_count,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::tuple&lt;uint32_t,<sp/>uint32_t,<sp/>float&gt;&gt;&amp;<sp/>edges,</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="structtmap_1_1LayoutConfiguration" kindref="compound">tmap::LayoutConfiguration</ref><sp/>config,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>create_mst)</highlight></codeline>
<codeline lineno="263"><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="structtmap_1_1GraphProperties" kindref="compound">tmap::GraphProperties</ref><sp/>gp;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>EdgeWeightedGraph&lt;float&gt;<sp/>g;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>std::vector&lt;std::vector&lt;uint32_t&gt;&gt;<sp/>adjacency_list(vertex_count);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>degrees(vertex_count);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>std::vector&lt;node&gt;<sp/>index_to_node(vertex_count);</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint32_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vertex_count;<sp/>i++)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>index_to_node[i]<sp/>=<sp/>g.newNode();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>edges.size();<sp/>i++)</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>g.newEdge(index_to_node[std::get&lt;0&gt;(edges[i])],</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index_to_node[std::get&lt;1&gt;(edges[i])],</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::get&lt;2&gt;(edges[i]));</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>ogdf::makeLoopFree(g);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>ogdf::makeParallelFreeUndirected(g);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>uint32_t<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>v<sp/>:<sp/>g.nodes)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>degrees[i++]<sp/>=<sp/>v-&gt;degree();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>gp.<ref refid="structtmap_1_1GraphProperties_1af4c85653b3bf56c6dbf19d7a38af40bc" kindref="member">degrees</ref><sp/>=<sp/>degrees;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(create_mst)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>gp.<ref refid="structtmap_1_1GraphProperties_1a51fa52c1cc9c8d382d507349e99447be" kindref="member">mst_weight</ref><sp/>=<sp/>ogdf::makeMinimumSpanningTree(g,<sp/>g.edgeWeights());</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>v<sp/>:<sp/>g.nodes)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>adjacency_list[i]<sp/>=<sp/>std::vector&lt;uint32_t&gt;(v-&gt;adjEntries.size());</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(adjEntry<sp/>adj<sp/>:<sp/>v-&gt;adjEntries)</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>adjacency_list[i][j++]<sp/>=<sp/>adj-&gt;theEdge()-&gt;opposite(v)-&gt;index();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>gp.<ref refid="structtmap_1_1GraphProperties_1a04c11168f810fdaf8b7bfecf96413ba7" kindref="member">adjacency_list</ref><sp/>=<sp/>adjacency_list;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>GraphAttributes<sp/>graph_attributes(g);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>MultilevelGraph<sp/>mlg(g);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="layout_8hh_1a126dbc6ec8355732c528abb2877e60d4" kindref="member">LayoutInternal</ref>(g,<sp/>vertex_count,<sp/>config,<sp/>gp);</highlight></codeline>
<codeline lineno="307"><highlight class="normal">}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">std::tuple&lt;std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint32_t&gt;,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtmap_1_1GraphProperties" kindref="compound">tmap::GraphProperties</ref>&gt;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="layout_8hh_1a126dbc6ec8355732c528abb2877e60d4" kindref="member">tmap::LayoutInternal</ref>(EdgeWeightedGraph&lt;float&gt;&amp;<sp/>g,</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/>vertex_count,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>LayoutConfiguration<sp/>config,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GraphProperties&amp;<sp/>gp)</highlight></codeline>
<codeline lineno="318"><highlight class="normal">{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>for<sp/>isolated<sp/>nodes.<sp/>If<sp/>there<sp/>are<sp/>isolated<sp/>nodes,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>call<sp/>placement<sp/>step<sp/>later<sp/>on.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>NodeArray&lt;int&gt;<sp/>connected_components(g);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>List&lt;node&gt;<sp/>isolated_nodes;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n_connected_components<sp/>=</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>connectedComponents(g,<sp/>connected_components,<sp/>&amp;isolated_nodes);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>gp.n_connected_components<sp/>=<sp/>n_connected_components;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>gp.n_isolated_vertices<sp/>=<sp/>isolated_nodes.size();</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>GraphAttributes<sp/>ga(g);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>ga.setAllHeight(config.node_size);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/>ga.setAllWidth(config.node_size);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(edge<sp/>e<sp/>:<sp/>g.edges)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>g.setWeight(e,<sp/>1.0);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Starting<sp/>the<sp/>layout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>MultilevelGraph<sp/>mlg(ga);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>FastMultipoleEmbedder<sp/>is<sp/>used<sp/>for<sp/>the<sp/>single<sp/>level<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/>FastMultipoleEmbedder*<sp/>fme<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>FastMultipoleEmbedder();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>fme-&gt;setNumIterations(config.fme_iterations);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>fme-&gt;setRandomize(config.fme_randomize);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>fme-&gt;setNumberOfThreads(config.fme_threads);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>fme-&gt;setMultipolePrec(config.fme_precision);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>fme-&gt;setDefaultEdgeLength(1);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>fme-&gt;setDefaultNodeSize(1);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>minimize<sp/>dispersion<sp/>of<sp/>the<sp/>graph<sp/>when<sp/>more<sp/>nodes<sp/>are<sp/>added,<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>ScalingLayout<sp/>can<sp/>be<sp/>used<sp/>to<sp/>scale<sp/>up<sp/>the<sp/>graph<sp/>on<sp/>each<sp/>level.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>ScalingLayout*<sp/>sl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ScalingLayout();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>sl-&gt;setLayoutRepeats(config.sl_repeats);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>sl-&gt;setSecondaryLayout(fme);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>the<sp/>placement.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>InitialPlacer*<sp/>placer<sp/>=<sp/>GetBarycenterPlacer();</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(config.placer)<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Placer::Barycenter:</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placer<sp/>=<sp/>GetBarycenterPlacer();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Placer::Circle:</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placer<sp/>=<sp/>GetCirclePlacer();</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Placer::Median:</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placer<sp/>=<sp/>GetMedianPlacer();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Placer::Random:</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placer<sp/>=<sp/>GetRandomPlacer();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Placer::Solar:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placer<sp/>=<sp/>GetSolarPlacer();</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Placer::Zero:</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>placer<sp/>=<sp/>GetZeroPlacer();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Used<sp/>for<sp/>the<sp/>coarsening<sp/>phase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>MultilevelBuilder*<sp/>merger<sp/>=<sp/>GetFactoredAdjustedMerger&lt;EdgeCoverMerger&gt;();</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(config.merger)<sp/>{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Merger::EdgeCover:</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>merger<sp/>=<sp/>GetFactoredAdjustedMerger&lt;EdgeCoverMerger&gt;(</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.merger_factor,<sp/>config.merger_adjustment);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Merger::LocalBiconnected:</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>merger<sp/>=<sp/>GetFactoredAdjustedMerger&lt;LocalBiconnectedMerger&gt;(</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>config.merger_factor,<sp/>config.merger_adjustment);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Merger::Solar:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>merger<sp/>=<sp/>GetAdjustedMerger&lt;SolarMerger&gt;(config.merger_adjustment);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>Merger::IndependentSet:</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>merger<sp/>=</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>GetAdjustedMerger&lt;IndependentSetMerger&gt;(config.merger_adjustment);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>scaling<sp/>type.<sp/>As<sp/>I<sp/>do<sp/>not<sp/>want<sp/>to<sp/>expose<sp/>any<sp/>OGDF<sp/>to<sp/>Python,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>there<sp/>is<sp/>this<sp/>intermediate<sp/>step.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/>ScalingLayout::ScalingType<sp/>scaling_type<sp/>=</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>ScalingLayout::ScalingType::RelativeToDrawing;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(config.sl_scaling_type)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ScalingType::Absolute:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaling_type<sp/>=<sp/>ScalingLayout::ScalingType::Absolute;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ScalingType::RelativeToAvgLength:</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaling_type<sp/>=<sp/>ScalingLayout::ScalingType::RelativeToAvgLength;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ScalingType::RelativeToDesiredLength:</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaling_type<sp/>=<sp/>ScalingLayout::ScalingType::RelativeToDesiredLength;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>ScalingType::RelativeToDrawing:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scaling_type<sp/>=<sp/>ScalingLayout::ScalingType::RelativeToDrawing;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Postprocessing<sp/>is<sp/>applied<sp/>at<sp/>each<sp/>level<sp/>after<sp/>the<sp/>single<sp/>level<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>example<sp/>a<sp/>FastMultipoleEmbedder<sp/>with<sp/>zero<sp/>iterations<sp/>is<sp/>used<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>postprocessing.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>sl-&gt;setExtraScalingSteps(config.sl_extra_scaling_steps);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/>sl-&gt;setScalingType(scaling_type);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>sl-&gt;setScaling(config.sl_scaling_min,<sp/>config.sl_scaling_max);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Then<sp/>the<sp/>ModularMultilevelMixer<sp/>is<sp/>created.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/>ModularMultilevelMixer*<sp/>mmm<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ModularMultilevelMixer;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>mmm-&gt;setLayoutRepeats(config.mmm_repeats);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>single<sp/>level<sp/>layout,<sp/>the<sp/>placer<sp/>and<sp/>the<sp/>merger<sp/>are<sp/>set.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/>mmm-&gt;setLevelLayoutModule(sl);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>mmm-&gt;setInitialPlacer(placer);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>mmm-&gt;setMultilevelBuilder(merger);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(config.sl_scaling_type<sp/>==<sp/>ScalingType::Absolute)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>sl-&gt;setMMM(mmm);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_connected_components<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>energybased<sp/>algorithms<sp/>are<sp/>not<sp/>doing<sp/>well<sp/>for<sp/>disconnected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>graphs,<sp/>the<sp/>ComponentSplitterLayout<sp/>is<sp/>used<sp/>to<sp/>split<sp/>the<sp/>graph<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>computation<sp/>is<sp/>done<sp/>separately<sp/>for<sp/>each<sp/>connected<sp/>component.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>ComponentSplitterLayout*<sp/>csl<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ComponentSplitterLayout;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>TileToRowsPacker<sp/>merges<sp/>these<sp/>connected<sp/>components<sp/>after<sp/>computation.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/>TileToRowsCCPacker*<sp/>ttrccp<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>TileToRowsCCPacker;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/>csl-&gt;setPacker(ttrccp);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>csl-&gt;setLayoutModule(mmm);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>last<sp/>the<sp/>PreprocessorLayout<sp/>removes<sp/>double<sp/>edges<sp/>and<sp/>loops.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>PreprocessorLayout<sp/>ppl;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>ppl.setLayoutModule(csl);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>ppl.setRandomizePositions(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>ppl.call(mlg);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>mmm-&gt;call(mlg);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>mlg.exportAttributes(ga);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x(vertex_count);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y(vertex_count);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>s(g.edges.size());</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>t(g.edges.size());</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(node<sp/>v<sp/>:<sp/>g.nodes)<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>ga.x(v);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>ga.y(v);</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Also<sp/>norm<sp/>distances,<sp/>as<sp/>units<sp/>are<sp/>meaningless</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Center<sp/>on<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_x<sp/>=<sp/>*max_element(x.begin(),<sp/>x.end());</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>max_y<sp/>=<sp/>*max_element(y.begin(),<sp/>y.end());</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_x<sp/>=<sp/>*min_element(x.begin(),<sp/>x.end());</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>min_y<sp/>=<sp/>*min_element(y.begin(),<sp/>y.end());</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diff_x<sp/>=<sp/>max_x<sp/>-<sp/>min_x;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>diff_y<sp/>=<sp/>max_y<sp/>-<sp/>min_y;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>x.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>x[i]<sp/>=<sp/>(x[i]<sp/>-<sp/>min_x)<sp/>/<sp/>diff_x<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>y[i]<sp/>=<sp/>(y[i]<sp/>-<sp/>min_y)<sp/>/<sp/>diff_y<sp/>-<sp/>0.5;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(edge<sp/>e<sp/>:<sp/>g.edges)<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>s[i]<sp/>=<sp/>e-&gt;source()-&gt;index();</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>t[i]<sp/>=<sp/>e-&gt;target()-&gt;index();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(x,<sp/>y,<sp/>s,<sp/>t,<sp/>gp);</highlight></codeline>
<codeline lineno="490"><highlight class="normal">}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">std::tuple&lt;std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;float&gt;&gt;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><ref refid="layout_8hh_1aeb4ec1a90d58bc1ba5f54412124cbf21" kindref="member">tmap::MakeEdgeList</ref>(</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x,<sp/>std::vector&lt;float&gt;<sp/>y,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>std::vector&lt;uint32_t&gt;<sp/>s,<sp/>std::vector&lt;uint32_t&gt;<sp/>t)<sp/></highlight></codeline>
<codeline lineno="499"><highlight class="normal">{</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x1(s.size());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y1(s.size());</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>x2(s.size());</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>std::vector&lt;float&gt;<sp/>y2(s.size());</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>s.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>x1[i]<sp/>=<sp/>x[s[i]];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>y1[i]<sp/>=<sp/>y[s[i]];</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>x2[i]<sp/>=<sp/>x[t[i]];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>y2[i]<sp/>=<sp/>y[t[i]];</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_tuple(x1,<sp/>y1,<sp/>x2,<sp/>y2);</highlight></codeline>
<codeline lineno="513"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="tmap/layout.cc"/>
  </compounddef>
</doxygen>
