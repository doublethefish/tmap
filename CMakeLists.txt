cmake_minimum_required(VERSION 3.10)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

if(MSVC)
    set(CMAKE_GENERATOR_TOOLSET "ClangCL")
endif(MSVC)

project(_tmap)

if(MSVC)
    # set(CMAKE_CXX_FLAGS_DEBUG "/O2 /permissive /std:c++17")
    # set(CMAKE_CXX_FLAGS_RELEASE "/O2 /permissive /std:c++17 /wd4068 /wd4305 /wd4267 /wd4244")
else()
  # Set O2 optimisations, the more stable option
  set(CMAKE_CXX_FLAGS_DEBUG "-O2")
  set(CMAKE_CXX_FLAGS_RELEASE "-O2")

  # Ensure we have position independent code gen, to help linking x-platform.
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fPIC")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -fPIC")

  if(CMAKE_C_COMPILER_ID MATCHES "Clang")
    set(OpenMP_C "${CMAKE_C_COMPILER}")
    # set(OpenMP_C_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
    set(OpenMP_C_FLAGS "-Wno-unused-command-line-argument")
    set(OpenMP_C_LIB_NAMES "libomp" "libgomp" "libiomp5")
    set(OpenMP_libomp_LIBRARY ${OpenMP_C_LIB_NAMES})
    set(OpenMP_libgomp_LIBRARY ${OpenMP_C_LIB_NAMES})
    set(OpenMP_libiomp5_LIBRARY ${OpenMP_C_LIB_NAMES})
  endif()

  if(CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    set(OpenMP_CXX "${CMAKE_CXX_COMPILER}")
    #set(OpenMP_CXX_FLAGS "-fopenmp=libomp -Wno-unused-command-line-argument")
    set(OpenMP_CXX_FLAGS "-Wno-unused-command-line-argument")
    set(OpenMP_CXX_LIB_NAMES "libomp" "libgomp" "libiomp5")
    set(OpenMP_libomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
    set(OpenMP_libgomp_LIBRARY ${OpenMP_CXX_LIB_NAMES})
    set(OpenMP_libiomp5_LIBRARY ${OpenMP_CXX_LIB_NAMES})
  else()
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fopenmp")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_DEBUG} -fopenmp")
  endif()
endif(MSVC)


# Generate local ogdf library
add_subdirectory(ogdf-conda/src)
if (${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    # these appear to actualy load omp headers as well...
    SET(OGDF_INCLUDE "/usr/local/include")
    SET(OGDF_LIB "/usr/local/lib")

    include_directories(${OGDF_INCLUDE})
    link_directories(${OGDF_LIB})

    SET(OMP_INC "/opt/homebrew/include")
    include_directories(${OMP_INC})
elseif(WIN32)
    SET(OGDF_INCLUDE "C:/ogdf/include")
    SET(OGDF_LIB "C:/ogdf/lib")

    include_directories(${OGDF_INCLUDE})
    link_directories(${OGDF_LIB})
else()
    SET(OGDF_INCLUDE "/include")
    SET(OGDF_LIB "/lib")

    include_directories(${OGDF_INCLUDE})
    link_directories(${OGDF_LIB})
endif()

find_package(OpenMP REQUIRED)

set(THREADS_PREFER_PTHREAD_FLAG ON)

find_package(Threads REQUIRED)

SET(SOURCE_DIR "src/_tmap")
# Tell cmake that headers are in alse in source_dir
include_directories(${SOURCE_DIR})
SET(SOURCES "${SOURCE_DIR}/layout.cc" "${SOURCE_DIR}/lshforest.cc" "${SOURCE_DIR}/minhash.cc" "${SOURCE_DIR}/analyse.cc")

# Generate python module
add_subdirectory(pybind11)

pybind11_add_module(_tmap ${SOURCES} "${SOURCE_DIR}/bindings.cc")
if(MSVC)
target_link_libraries(_tmap PRIVATE OGDF.lib COIN.lib)
else()
target_link_libraries(_tmap PRIVATE OGDF COIN)
endif(MSVC)

target_link_libraries(_tmap PRIVATE Threads::Threads)
target_link_libraries(_tmap PRIVATE ${OpenMP_CXX_FLAGS})
